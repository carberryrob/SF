# Enable logic before blocks section

# Enable logic before blocks section

###count the number of addresses chosen.
cnt = 1
addused = []
dash = Physician_List.rfind(": ")+2
addused.append(Physician_List[dash:])

for address in (card2_address, card3_address, card4_address):
	if address != '-None':
		if address not in addused:
			cnt += 1
			addused.append(address)
		else:
			COND('The address for ' + address.upper() + ' is already selected.  Only unique addresses can be added to the envelope.')
address = None

if (ph1):
	Phone1Word = ph1
if (ph3):
	Phone3Word = ph3

###if only one address is chosen then print on the front and leave the back blank.
add1 = None
add2 = None
add3 = None
add4 = None

BT = -10
###check box adjustment so it aligns with the address top.
top = (4.5*72)
###place the top of the addresses 3.75in from the bottom.
Bspc = 6
###space between the check box and address block, 6 points.
Aspc = 12
###space between addresses, 0.25in or 18points.
NL = (4.25*72)
###width of a #10 Env, used to center the combined addresses length.
addresses = []
###used to create a python list of addresses

box = DWIMLINES([LEFT, F6, BORDER(WORD('q',F6),0.5,C1,2), NEWLINE]) 
###this is how I create the check box. (draw a border around a font that is white)

###independent of which address drop-downs are selected, create each address text.
if cnt == 1:
	add1 = DWIMLINES([CENTER, F3, card_street1, IF(', ', card_street2), NEWLINE,
	JOIN3(card_city, ', ', JOIN3(card_state, ' ', card_zip)), NEWLINE,
	F1, IFSET(Phone1Word,'Office '), F4, Phone1Word, F1, IFSET(Phone3Word, SPACER(6)), IFSET(Phone3Word,'Fax '), F4, Phone3Word, NEWLINE])
	addresses.append(add1)

elif cnt == 3:
	add1 = DWIMLINES([LEFT, F3, card_street1, NEWLINE, card_street2, NEWLINE,
	JOIN3(card_city, ', ', JOIN3(card_state, ' ', card_zip)), NEWLINE,
	F1, IFSET(Phone1Word,'Office '), F4, Phone1Word, NEWLINE, F1, IFSET(Phone3Word,'Fax '), F4, Phone3Word, NEWLINE])
	addresses.append(add1)

	if card2_address != '-None':
		add2 = DWIMLINES([LEFT, F3, card2_street1, NEWLINE, card2_street2, NEWLINE,
		JOIN3(card2_city, ', ', JOIN3(card2_state, ' ', card2_zip)), NEWLINE,
		F1, IFSET(card2_phone,'Office '), F4, card2_phone, NEWLINE, F1, IFSET(card2_fax,'Fax '), F4, card2_fax, NEWLINE])
		addresses.append(add2)
	if card3_address != '-None':
		add3 = DWIMLINES([LEFT, F3, card3_street1, NEWLINE, card3_street2, NEWLINE,
		JOIN3(card3_city, ', ', JOIN3(card3_state, ' ', card3_zip)), NEWLINE,
		F1, IFSET(card3_phone,'Office '), F4, card3_phone, NEWLINE, F1, IFSET(card3_fax,'Fax '), F4, card3_fax, NEWLINE])
		addresses.append(add3)
	if card4_address != '-None':
		add4 = DWIMLINES([LEFT, F3, card4_street1, NEWLINE, card4_street2, NEWLINE,
		JOIN3(card4_city, ', ', JOIN3(card4_state, ' ', card4_zip)), NEWLINE,
		F1, IFSET(card4_phone,'Office '), F4, card4_phone, NEWLINE, F1, IFSET(card4_fax,'Fax '), F4, card4_fax, NEWLINE])
		addresses.append(add4)

else:
	add1 = DWIMLINES([LEFT, F3, card_street1, IF(', ', card_street2), NEWLINE,
	JOIN3(card_city, ', ', JOIN3(card_state, ' ', card_zip)), NEWLINE,
	F1, IFSET(Phone1Word,'Office '), F4, Phone1Word, F1, IFSET(Phone3Word, SPACER(6)), IFSET(Phone3Word,'Fax '), F4, Phone3Word, NEWLINE])
	addresses.append(add1)

	if card2_address != '-None':
		add2 = DWIMLINES([LEFT, F3, card2_street1, IF(', ', card2_street2), NEWLINE,
		JOIN3(card2_city, ', ', JOIN3(card2_state, ' ', card2_zip)), NEWLINE,
		F1, IFSET(card2_phone,'Office '), F4, card2_phone, F1, IFSET(card2_fax, SPACER(6)), IFSET(card2_fax,'Fax '), F4, card2_fax, NEWLINE])
		addresses.append(add2)
	if card3_address != '-None':
		add3 = DWIMLINES([LEFT, F3, card3_street1, IF(', ', card3_street2), NEWLINE,
		JOIN3(card3_city, ', ', JOIN3(card3_state, ' ', card3_zip)), NEWLINE,
		F1, IFSET(card3_phone,'Office '), F4, card3_phone, F1, IFSET(card3_fax, SPACER(6)), IFSET(card3_fax,'Fax '), F4, card3_fax, NEWLINE])
		addresses.append(add3)
	if card4_address != '-None':
		add4 = DWIMLINES([LEFT, F3, card4_street1, IF(', ', card4_street2), NEWLINE,
		JOIN3(card4_city, ', ', JOIN3(card4_state, ' ', card4_zip)), NEWLINE,
		F1, IFSET(card4_phone,'Office '), F4, card4_phone, F1, IFSET(card4_fax, SPACER(6)), IFSET(card4_fax,'Fax '), F4, card4_fax, NEWLINE])
		addresses.append(add4)

########################################################################################
### Based on the number of addresses selected, create each address block from the
### python addresses list (addresses[i]).
### Place all the addresses at 0 left so each block width can be calculated and used
### for the placement so all combined are evenly spaced and centered.
### After calculated, the addresses will be moved to the precise placement for print.
########################################################################################
if cnt == 1:
	Blocka1 = DWIMBLOCK([addresses[0]], (0, top), (LEFT, TOP_BASELINE), (1.25*72, 0), uniform_linescale=1, layer=0)
	#Box1 = DWIMBLOCK([box], (0, Blocka1._get_top() + BT), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)

	allW = 0
	allW += Blocka1._get_right() ###gets the actual width of each block.		block = None
	#allW += Box1._get_right() ###gets the actual width of each check box.
	allW += (Aspc * (cnt-1)) + (Bspc * cnt)  ###get the total width of all evenly spaced addresses.
	NL -= allW   ###get the calculated new left(NL) for the first check box (envelope width - allW)

	#Box1.move(NL/2, 0) ###move the 1st check box to the new left coordinate divided in half for precise centering.
	
	### Now move all remaining check box & address combinations so they
	### are evenly spaced and will result in all addresses combined being centered on the envelope.
	Blocka1.move(NL/2, 0) 

elif cnt == 2:
	Blocka1 = DWIMBLOCK([addresses[0]], (0, top), (LEFT, TOP_BASELINE), (1.25*72, 0), uniform_linescale=1, layer=0)
	Box1 = DWIMBLOCK([box], (0, Blocka1._get_top() + BT), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)
	Blocka2 = DWIMBLOCK([addresses[1]], (0, top), (LEFT, TOP_BASELINE), (1.25*72, 0), uniform_linescale=1, layer=0)
	Box2 = DWIMBLOCK([box], (0, Blocka2._get_top() + BT), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)

	allW = 0
	for block in (Blocka1, Blocka2):
		allW += block._get_right() ###gets the actual width of each block.
	block = None
	for block in (Box1, Box2):
		allW += block._get_right() ###gets the actual width of each check box.
	block = None
	allW += (Aspc * (cnt-1)) + (Bspc * cnt)  ###get the total width of all evenly spaced addresses.
	NL -= allW   ###get the calculated new left(NL) for the first check box (envelope width - allW)

	Box1.move(NL/2, 0) ###move the 1st check box to the new left coordinate divided in half for precise centering.
	
	### Now move all remaining check box & address combinations so they
	### are evenly spaced and will result in all addresses combined being centered on the envelope.
	Blocka1.move(Box1._get_right()+Bspc, 0) 
	Box2.move(Blocka1._get_right()+Aspc, 0)
	Blocka2.move(Box2._get_right()+Bspc, 0)

elif cnt == 3:
	Blocka1 = DWIMBLOCK([addresses[0]], (0, top), (LEFT, TOP_BASELINE), (1*72, 0), uniform_linescale=1, layer=0)
	Box1 = DWIMBLOCK([box], (0, Blocka1._get_top() + BT), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)
	Blocka2 = DWIMBLOCK([addresses[1]], (0, top), (LEFT, TOP_BASELINE), (1*72, 0), uniform_linescale=1, layer=0)
	Box2 = DWIMBLOCK([box], (0, Blocka2._get_top() + BT), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)
	Blocka3 = DWIMBLOCK([addresses[2]], (0, top), (LEFT, TOP_BASELINE), (1*72, 0), uniform_linescale=1, layer=0)
	Box3 = DWIMBLOCK([box], (0, (Blocka3._get_top() + BT)), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)

	allW = 0
	for block in (Blocka1, Blocka2, Blocka3):
		allW += block._get_right()
	block = None
	for block in (Box1, Box2, Box3):
		allW += block._get_right()
	block = None
	allW += (Aspc * (cnt-1)) + (Bspc * cnt)
	NL -= allW
	Box1.move(NL/2, 0)
	Blocka1.move(Box1._get_right()+Bspc, 0)
	Box2.move(Blocka1._get_right()+Aspc, 0)
	Blocka2.move(Box2._get_right()+Bspc, 0)
	Box3.move(Blocka2._get_right()+Aspc, 0)
	Blocka3.move(Box3._get_right()+Bspc, 0)

elif cnt == 4:
	Blocka1 = DWIMBLOCK([addresses[0]], (0, top), (LEFT, TOP_BASELINE), (1.25*72, 0), uniform_linescale=1, layer=0)
	Box1 = DWIMBLOCK([box], (0, Blocka1._get_top() + BT), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)
	Blocka2 = DWIMBLOCK([addresses[1]], (0, top), (LEFT, TOP_BASELINE), (1.25*72, 0), uniform_linescale=1, layer=0)
	Box2 = DWIMBLOCK([box], (0, Blocka2._get_top() + BT), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)
	Blocka3 = DWIMBLOCK([addresses[2]], (0, top), (LEFT, TOP_BASELINE), (1.25*72, 0), uniform_linescale=1, layer=0)
	Box3 = DWIMBLOCK([box], (0, (Blocka3._get_top() + BT)), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)
	Blocka4 = DWIMBLOCK([addresses[3]], (0, top), (LEFT, TOP_BASELINE), (1.25*72, 0), uniform_linescale=1, layer=0)
	Box4 = DWIMBLOCK([box], (0, (Blocka4._get_top() + BT)), (LEFT, TOP_BASELINE), (1*72, 0), layer=0)

	allW = 0
	for block in (Blocka1, Blocka2, Blocka3, Blocka4):
		allW += block._get_right()
	block = None
	for block in (Box1, Box2, Box3, Box4):
		allW += block._get_right()
	block = None
	allW += (Aspc * (cnt-1)) + (Bspc * cnt)
	NL -= allW
	Box1.move(NL/2, 0)
	Blocka1.move(Box1._get_right()+Bspc, 0)
	Box2.move(Blocka1._get_right()+Aspc, 0)
	Blocka2.move(Box2._get_right()+Bspc, 0)
	Box3.move(Blocka2._get_right()+Aspc, 0)
	Blocka3.move(Box3._get_right()+Bspc, 0)
	Box4.move(Blocka3._get_right()+Aspc, 0)
	Blocka4.move(Box4._get_right()+Bspc, 0)
